name: CI
env:
  VERSION: 1.1.${{ github.run_number }}
  VCPKG_EXPORT: https://github.com/mganss/vcpkg/releases/download/v8_8.5.210.20/vcpkg-export.7z

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: msys2/setup-msys2@v2

      - name: Download vcpkg export
        run: |
          (New-Object System.Net.WebClient).DownloadFile("${{ env.VCPKG_EXPORT }}", "vcpkg-export.7z")
          7z x vcpkg-export.7z

      - name: Build
        shell: cmd
        run: |
          call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          md out\build\x64-Release
          CMake -G Ninja -DVERSION=${{ env.VERSION }} -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=vcpkg-export/scripts/buildsystems/vcpkg.cmake -B out\build\x64-Release -S .
          CMake --build out\build\x64-Release -- -v

      - name: Test
        shell: msys2 {0}
        working-directory: ./test
        run: ./test.sh
        
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: js.dll
          path: binaries/x64-windows-static/js.dll

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Download vcpkg export
        run: |
          curl -L -s -o vcpkg-export.7z ${{ env.VCPKG_EXPORT }}
          7zr x vcpkg-export.7z

      - name: Build
        run: |
          sudo apt-get -qy install ninja-build
          mkdir -p out/build/x64-linux-Release
          cmake -G Ninja \
            -DVERSION=${{ env.VERSION }} \
            -DVCPKG_TARGET_TRIPLET=x64-linux \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=vcpkg-export/scripts/buildsystems/vcpkg.cmake \
            -B out/build/x64-linux-Release -S .
          cmake --build out/build/x64-linux-Release -- -v

      - name: Test
        working-directory: ./test
        run: |
          chmod +x ./pd/x64-linux/bin/pd
          bash ./test.sh

      - name: Build for coverage analysis
        run: |
          mkdir -p out/build/x64-linux-Debug
          cmake -G Ninja \
            -DVERSION=${{ env.VERSION }} \
            -DVCPKG_TARGET_TRIPLET=x64-linux \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_TOOLCHAIN_FILE=vcpkg-export/scripts/buildsystems/vcpkg.cmake \
            -DCOVERAGE=ON \
            -B out/build/x64-linux-Debug -S .
          cmake --build out/build/x64-linux-Debug -- -v

      - name: Generate coverage data
        working-directory: ./test
        run: |
          bash ./test.sh          
          cd ../out/build/x64-linux-Debug/
          gcov CMakeFiles/pdjs_project.dir/pdjs/js.cpp.gcno
          cat js.cpp.gcov

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: js.pd_linux
          path: binaries/x64-linux/js.pd_linux

  create-tag:
    runs-on: ubuntu-latest
    needs: [ build-windows, build-linux ]
    steps:
      - name: Create tag v${{ env.VERSION }}
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/v${{ env.VERSION }}",
              sha: context.sha
            })
